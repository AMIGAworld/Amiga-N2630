
		PARTNO	  XXXXX ;
		NAME	  U304 ;
		DATE	  September 26, 1988 ;
		REV	  4 ;
		DESIGNER  Haynie ;
		COMPANY   Commodore ;
		ASSEMBLY  312828 ;
		LOCATION  U304 ;

/************************************************************************/
/*								  	*/
/*  A2630	ROM and AUTOconfig chip selects, Onboard generation 	*/
/*		and global reset			  		*/
/*									*/
/************************************************************************/
/*  Allowable Target Device Types: 20L8A 				*/
/************************************************************************/
/*  Free Pins: 15(O)							*/
/************************************************************************/
/*  HISTORY								*/
/*	DBH Sep 25:	Big change for Rev3 boards			*/
/*	DBH Sep 26:	Changed to 20L8 cause of Rev3 errors		*/
/************************************************************************/

/**  Inputs  **/

PIN 1		=  PHANLO	;	/* ROM Phantom Low enable */
PIN 2		=  PHANHI	;	/* ROM Phantom High enable */
PIN 3		=  ROMCONF	;	/* The rom is configed */
PIN [4..8]	=  [A16..20]	;	/* CPU Addresses 16-20 */
PIN 9		=  RAMCONF	;	/* The board is fully configed */
PIN 11		=  A21		;	/* CPU Address */
PIN 13		=  A22		;
PIN 14		=  A23		;
PIN 16		=  AUTO		;	/* Should I do autoconfig of memory? */
PIN 17		= !AS		;	/* Address strobe */
PIN 18		=  RW		;	/* Processor Read/Write */
PIN 23		= !EXTERN	;	/* External access? */

/**  Outputs  **/

PIN 19		= !CSAUTO	;	/* Auto config chip select */
PIN 22		= !CSROM	;	/* Rom chip select */
PIN 21		= !ONBOARD	;	/* Addressed location is on board */

/**  Used Internally **/

/** Declarations and Intermediate Variable Definitions **/

RULES:
ALL MY INTERNAL SIGNALS ARE ACTIVE HIGH
ALL MY INTERNAL SIGNALS ARE IN lowercase
ALL EXTERNAL SIGNALS ARE IN UPPERCASE
ALL ACTIVE LOW SIGNALS ARE PRECEEDED BY n
ALL ACTIVE HIGH SIGNALS HAVE NO PREFIX

THE ORIGINAL PAL CODE IS THE FIRST LINE(S)
WITH THE PROPOSED VHDL CODE ON THE FOLLOWING LINES

USEFUL CONVERSION GRID FOR LOGIC STATES 'CAUSE IT CAN BE A MESS!

            PIN SIGNAL
          --------------
          |  !  |  -   |
------------------------
D S |     | NOT |  NOT |
E T |  !  | NOT |      |
S A |     |  1  |   0  |
I T |-----|-------------
R E |     | NOT |      |
E   |  -  |     |   1  |
D   |     |  0  |      |
------------------------

field addr	= [A23..16];
SIGNAL addr : STD_LOGIC_VECTOR( 23 downto 16 ) := (others => '0');

readcycle	= RW & AS;
SIGNAL readcycle : STD_LOGIC:='0';
readcycle <= '1' WHEN RnW = '1' AND nAS = '0';

/* The standard auto config space, used to configure both special and
   standard configuration registers. */

autocon		= addr:[e80000..e8ffff];
SIGNAL autoconfigspace : STD_LOGIC:='0';
autoconfigspace <= '1' WHEN addr => x"e80000" AND addr <= x"e8ffff" ELSE '0';

/* High memory rom space, where ROMs normally reside when available. */

hirom		= addr:[f80000..f8ffff];
SIGNAL hirom : STD_LOGIC:='0';
hirom <= '1' WHEN addr => x"f80000" AND addr <= x"f8ffff" ELSE '0';

/* Low memory ROM space, used for mapping of ROMs on reset. */

lorom		= addr:[000000..00ffff];
SIGNAL lorom : STD_LOGIC:='0';
lorom <= '1' WHEN addr => x"000000" AND addr <= x"00ffff" ELSE '0';

/* This is the basic ROM chip select logic.  We want ROM to pay attention
   to the phantom signals, and only show up on reads. */

icsrom		= hirom & !PHANHI & readcycle
		# lorom & !PHANLO & readcycle;
SIGNAL icsrom : STD_LOGIC:='0';
icsrom <= '1' WHEN ( hirom = '1' AND PHANHI = '0' AND readcycle = '1' ) OR ( lorom = '1' AND PHANHI = '0' AND readcycle = '1' ) ELSE '0';

/* This is the basic autoconfig chip select logic.  The special register
   always shows up first, the standard RAM register doesn't show up if 
   we're inhibiting autoconfiguration.  */

icsauto		= autocon & AS & !RAMCONF &  AUTO 
		# autocon & AS & !ROMCONF & !AUTO;
SIGNAL icsauto : STD_LOGIC:='0';
iscauto <= '1' WHEN ( autocon = '1' AND nAS = '0' AND RAMCONF = '0' AND AUTO = '1' ) OR ( autocon = '1' AND nAS = '0' AND ROMCONF = '0' AND AUTO = '0' ) ELSE '0';

/**  Logic Equations  **/

/* Not much left to do at this point.  Since writing to a configuration
   register can change the mapping, I've gotta latch autoconfig chip
   select, and the ONBOARD signal based on it. */

CSROM		= icsrom;
nCSROM <= '0' WHEN icsrom = '1' ELSE '1';

CSAUTO		= icsauto
		# CSAUTO & AS;
nCSAUTO <= '0' WHEN ( iscauto '1' ) OR ( nCSAUTO = '0' AND nAS = '0') ELSE '1';

ONBOARD		= icsrom 
		# icsauto
		# ONBOARD & AS;
nONBOARD <= '0' WHEN icrom = '1' OR icsauto = '1' OR ( nONBOARD = '0' AND nAS = '0' ) ELSE '1';

