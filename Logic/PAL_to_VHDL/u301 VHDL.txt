
		PARTNO	  XXXXX ;
		NAME	  U301;
		DATE	  September 26, 1988 ;
		REV	  10 ;
		DESIGNER  Haynie ;
		COMPANY   Commodore ;
		ASSEMBLY  312828 ;
		LOCATION  U301;

/************************************************************************/
/*									*/
/*  A2630	Autoconfig control and reset generation 		*/
/*									*/
/************************************************************************/
/*  Allowable Target Device Types: 20L8A 				*/
/************************************************************************/
/*  Free Pins: NONE							*/
/************************************************************************/
/*  HISTORY								*/
/*	DBH Dec 22:	Adjusted autoconfig for 2Meg/4Meg option.	*/
/*	DBH May  3:	Added OS Mode option				*/
/*	DBH Sep 25:	Changed registers for proper autoconfig.	*/
/*	DBH Sep 26:	Fixed MEG4 logic to size properly.		*/
/************************************************************************/

/**  Inputs  **/

PIN 1		= !CSAUTO	;	/* Autoconfig chip select */
PIN 2		=  MEG4		;	/* Are we a 4 meg board? */
PIN 3		= !DS		;	/* Data Strobe */
PIN 4		=  PRW		;	/* Processor read write */
PIN 5		= !BOSS		;	/* Indicates that we are the boss ! */
PIN 6		= !CPURESET	;	/* The cpu reset line */
PIN 7		=  CONFIGED	;	/* The board is ROM configed */
PIN 8		=  RESENB	;	/* Enable for CPU reset feedback */
PIN 9		=  A1		;	/* Address line 1 */
PIN 10		=  A2		;	/* Address line 2 */
PIN 11		=  A3		;	/* Address line 3 */
PIN 13		=  A4		;	/* Address line 4 */
PIN 14		=  A5		;	/* Address line 5 */
PIN 23		=  A6		;	/* Address line 6 */
PIN 21		=  OSMODE	;	/* Which OS do you prefer */

/**  Outputs  **/

PIN 15		= !D31		;	/* Data line 31 */
PIN 16		= !D30		;	/* Data line 30 */
PIN 17		= !D29		;	/* Data line 29 */
PIN 18		= !D28		;	/* Data line 28 */
PIN 19		= !ROMCLK	;	/* Rom control register clock */
PIN 20		= !RAMCLK	;	/* RAM control register clock */
PIN 22		=  RESET	;	/* System Reset */

/** Declarations and Intermediate Variable Definitions **/

RULES:
ALL MY INTERNAL SIGNALS ARE ACTIVE HIGH
ALL MY INTERNAL SIGNALS ARE IN lowercase
ALL EXTERNAL SIGNALS ARE IN UPPERCASE
ALL ACTIVE LOW SIGNALS ARE PRECEEDED BY n
ALL ACTIVE HIGH SIGNALS HAVE NO PREFIX

THE ORIGINAL PAL CODE IS THE FIRST LINE(S)
WITH THE PROPOSED VHDL CODE ON THE FOLLOWING LINES

USEFUL CONVERSION GRID FOR LOGIC STATES 'CAUSE IT CAN BE A MESS!

            PIN SIGNAL
          --------------
          |  !  |  -   |
------------------------
D S |     | NOT |  NOT |
E T |  !  | NOT |      |
S A |     |  1  |   0  |
I T |-----|-------------
R E |     | NOT |      |
E   |  -  |     |   1  |
D   |     |  0  |      |
------------------------


field addr	= [A6..1];
SIGNAL addr : STD_LOGIC_VECTOR ( 6 downto 1 ) := (others => '0');
addr <= A(6 downto 1);

romaddr		= addr:40;
SIGNAL romaddr : STD_LOGIC := '0';
romaddr <= '1' WHEN addr = x"40"  ELSE '0';

ramaddr		= addr:48;
SIGNAL ramaddr : STD_LOGIC := '0';
ramaddr <= '1' WHEN addr = x"48" ELSE '0';

writecycle	= CSAUTO & !PRW & DS & !CPURESET;
SIGNAL writecycle : STD_LOGIC := '0';
writecycle <= '1' WHEN CSAUTO = '0' AND !PRW = '0' AND DS ='0' AND !CPURESET = '1' ELSE '0';

readcycle	= CSAUTO &  PRW & DS & !CPURESET;
SIGNAL readcycle : STD_LOGIC := '0';
readcycle <= '1' WHEN CSAUTO = '0' AND PRW = '1' AND DS ='0' AND !CPURESET = '1' ELSE '0';

/**  Logic Equations  **/
/*
	The RESET output feeds to the /RST signal from the A2000
	motherboard.  Which in turn enables the assertion of the /BOSS
	line when you're on a B2000.  Which in turn creates the
	/CPURESET line.  Together these make the RESET output.	In
	order to eliminate the glitch on RESET that this loop makes,
	the RESENB input is gated into the creation of RESET.  What
	this implies is that the 68020 can't reset the system until
	we're RESENB, OK?.  Make sure to consider the effects of this
	gated reset on any special use of the ROM configuration register.
	Using JMODE it's possible to reset the ROM configuration register
	under CPU control, but not if the RESENB line is negated.
	OSMODE can now be read from the ROM register to determine whether
	AmigaOS or UNIX is the user's preferred OS.
 */

THESE DATA BUS EQUATIONS ARE ALL RELATED TO AUTOCONFIG (ALMOST POSITIVE)
THESE ARE HANDLED IN A DIFFERENT WAY IN THE CPLD

D31		= addr:02
		# addr:0c & !OSMODE & !CONFIGED;
D30		= addr:04
		# addr:08 & CONFIGED;
D29		= addr:12 & CONFIGED
		# addr:16 & CONFIGED;
D28		= addr:00
		# addr:02 & !MEG4
		# addr:04 
		# addr:06;

[D31..28].OE	= readcycle & !RAMCLK;


ROMCLK		= writecycle & romaddr & !CONFIGED
		# ROMCLK & DS;
nROMCLK : out STD_LOGIC:='1';
nROMCLK <= '0' WHEN ( writecycle = '1' AND romaddr = '1' AND CONFIGED = '0' ) OR ( romclk = '1' AND nDS = '0' ) ELSE = '0';

RAMCLK		= writecycle & ramaddr & !ROMCLK
		# !CPURESET & RAMCLK;
nRAMCLK : out STD_LOGIC:='1';
nRAMCLK <= '0' WHEN ( writecycle = '1' AND ramaddr = '1' AND nROMCLK = '1' ) OR (nCPURESET = '1' AND nROMCLK = '1' ) ELSE '0';


RESET		= BOSS & CPURESET & RESENB;
nRESET : out STD_LOGIC:='1';
nRESET <= '0' WHEN nBOSS = '0' AND nCPURESET ='0' AND RESENB = '1' ELSE '1';

